import React from 'react';
import ReactDOM from 'react-dom';

// ****************************************JSX START****************************************

// ========================================[01] 在 JSX 中嵌入表达式 START========================================
const name = '叶文洁';
const element1 = <h1>你好，{name}！</h1>

// jsx part2
const user = {
    firstName: '淼',
    lastName: '汪'
}
function formatCnName(user) {
    return user.lastName + ' ' + user.firstName;
}
const element2 = (
    <h1>
        你好，{formatCnName(user)}！
    </h1>
)
// ========================================[01] 在 JSX 中嵌入表达式 END========================================


// ========================================[02] JSX 也是一个表达式 START========================================
function getGreeting(user) {
    if (user) {
        return <h1>你好，{formatCnName(user)}！</h1>
    } else {
        return <h1>你好，陌生人。</h1>
    }
}
// ========================================[02] JSX 也是一个表达式 END========================================


// ========================================[03] JSX特定属性 START========================================
// 在属性中嵌入 JavaScript 表达式时，不要在大括号外面加上引号。
// 你应该仅使用引号（对于字符串值）或大括号（对于表达式）中的一个，对于同一属性不能同时使用这两种符号。

// 可以通过使用引号，来将属性值指定为字符串字面量:
const element3 = <div tabIndex="0"></div>;
// 也可以使用大括号，来在属性值中插入一个 JavaScript 表达式:
const element3_1 = <img src={user.avatarUrl}></img>;
// ========================================[03] JSX特定属性 END========================================


// ========================================[04] 使用 JSX 指定子元素 START========================================
// 假如一个标签里面没有内容，你可以使用 /> 来闭合标签，就像 XML 语法一样:
const element4 = <img src={user.avatarUrl} />
// JSX 标签里能够包含很多子元素:
const element4_1 = (
    <div>
        <h1>你好</h1>
        <h2>很高兴在这里看到你。</h2>
    </div>
)
// ========================================[04] 使用 JSX 指定子元素 END========================================


// ========================================[05] JSX 防止注入攻击 START========================================
// React DOM 在渲染所有输入内容之前，默认会进行转义。
// 它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。
// 所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止 XSS（cross-site-scripting, 跨站脚本）攻击。
const title = 'title';
const title5 = 'potentially malicious input';
// 直接使用是安全的：
const element5 = <h1>{title}</h1>;

// ========================================[05] JSX 防止注入攻击 END========================================


// ========================================[06] JSX 表示对象 START========================================
// Babel 会把 JSX 转译成一个名为 React.createElement() 函数调用。
// 以下两种示例代码完全等效：
const element6_1 = (
    <h1 className="greeting">
        Hello,World!
    </h1>
);

const element16_2 = React.createElement(
    'h1',
    { className: 'greeting' },
    'Hello,World'
);

// React.createElement() 会预先执行一些检查，以帮助你编写无错代码，但实际上它创建了一个这样的对象：
// 注意：这是简化过的结构
const element6_3 = {
    type: 'h1',
    props: {
        className: 'greeting',
        children: 'Hello, world!'
    }
};

// ========================================[06] JSX 表示对象 END========================================

// ****************************************JSX END****************************************



// ****************************************元素渲染 START****************************************
// 元素是构成 React 应用的最小的构建块，描述了你在屏幕上想看到的内容。

// ****************************************元素渲染 END****************************************


// ========================================

// ReactDOM.render(
//     // element1,
//     element2,
//     document.getElementById('root'),
// );